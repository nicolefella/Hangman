/** HangmanGUI.as* Nicole Fella* Assignment 7*/package{	//import statements	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextField;		/*	* description of class	* "extends" statements would go here	*/		public class HangmanGUI extends MovieClip	{		/**********Instance Properties**********/		//user defined properties for class		var hangmanGame: HangmanGame;		public static var currentGuessText: String;					/**********Instance Methods**********/				//Constructor		public function HangmanGUI()		{			hangmanGame = new HangmanGame();			initGUI();		}				//Additional instance methods go here		/* initialize user interface elements (e.g., add event listeners, hide win/lose screens)		Make sure current display is up to date (refreshed)		*/		public function initGUI (): void		{			//add event listener for when guessButton is clicked			guessButton.addEventListener(MouseEvent.CLICK, userGuessed);			//start with invisible winner and loser symbols			win.visible = false;			lose.visible = false;			//invoke refreshDisplay function to set up interface			refreshDisplay ();		}				/*This function is invoked when the user guesses a letter 		(should be added as an event listener in the initGUI function)		If the game isn't over, call the guessLetter function to update "logic" 		and refresh display to reflect current state of game		*/		public function userGuessed (e: MouseEvent): void		{			//when button is clicked, invoke the guessLetter function with string input			hangmanGame.guessLetter (letterGuessField.text);			//update currentGuessField			currentGuessField.text = hangmanGame.getCurrentGuess ();			//store currentGuessField text as a variable currentGuessString			currentGuessText = currentGuessField.text;			//update remainingStrikesField			remainingStrikesField.text = intToString (hangmanGame.numberOfRemainingStrikes());			//invoke revealAnswer function to check gameOver, gameWon, and getAnswer			revealAnswer ();		}				/*refresh under interface (GUI), e.g., text fields to reflect 		(1) current guess		(2) number of strikes		*/		public function refreshDisplay (): void		{			//currentGuessField			currentGuessField.text = hangmanGame.getCurrentGuess();			//store currentGuessField text as a variable currentGuessString			currentGuessText = currentGuessField.text;			//remainingStrikesField			remainingStrikesField.text = intToString (hangmanGame.numberOfRemainingStrikes());		}				/*update GUI to reveal the correct answer*/		public function revealAnswer (): void		{			//check if game over			if (hangmanGame.gameOver() == true){					//if game over, get answer -- trace to OUTPUT window and answerField					trace ("The word was: " + hangmanGame.getAnswer ());					answerField.text = "The word was: " + hangmanGame.getAnswer ();			}			//check if game won			if (hangmanGame.gameWon() == true){				//if game won, display game win screen				win.visible = true;				//get answer -- trace to OUTPUT window and answerField				trace ("The word was: " + hangmanGame.getAnswer());				answerField.text = "The word was: " + hangmanGame.getAnswer ();			}			//if game over and game lost 			if (hangmanGame.gameOver()==true && hangmanGame.gameWon()==false){				//display game lose screen				lose.visible = true;				//get answer -- trace to OUTPUT window and answerField				trace("The word was: " + hangmanGame.getAnswer ());				answerField.text = "The word was: " + hangmanGame.getAnswer ();			}		}				//function intToString to be used for remainingStrikesField text		public function intToString( i : int ) : String 		{			// You should not understand this right now!			return i.toString();		}	}}